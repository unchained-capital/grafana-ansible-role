# {{ ansible_managed }}

# Set to true to log user information returned from LDAP
verbose_logging = {{ grafana_ldap_verbose_logging | lower }}

[[servers]]
# Ldap server host (specify multiple hosts space separated)
host = "{{ grafana_ldap_hosts }}"
# Default port is 389 or 636 if use_ssl = true
port = {{ grafana_ldap_port }}
# Set to true if ldap server supports TLS
use_ssl = {{ grafana_ldap_ssl | lower }}
# set to true if you want to skip ssl cert validation
ssl_skip_verify = {{ grafana_ldap_ssl_skip_verify | lower }}
# set to the path to your root CA certificate or leave unset to use system defaults
# root_ca_cert = /path/to/certificate.crt

# Search user bind dn
bind_dn = "{{ grafana_ldap_bind_dn }}"
# Search user bind password
bind_password = '{{ grafana_ldap_bind_pw }}'

# User search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)"
search_filter = "{{ grafana_ldap_search_filter }}"

# An array of base dns to search through
search_base_dns = ["{{ grafana_ldap_base_dns | join('","') }}"]

# In POSIX LDAP schemas, without memberOf attribute a secondary query must be made for groups.
# This is done by enabling group_search_filter below. You must also set member_of= "cn"
# in [servers.attributes] below.

## Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available)
# group_search_filter = "(&(objectClass=posixGroup)(memberUid=%s))"
{% if grafana_ldap_group_search_filter %}group_search_filter = "{{ grafana_ldap_group_search_filter }}"{% endif %}

## An array of the base DNs to search through for groups. Typically uses ou=groups
# group_search_base_dns = ["ou=groups,dc=grafana,dc=org"]
{% if grafana_ldap_group_base_dns %}group_search_base_dns = ["{{ grafana_ldap_group_base_dns | join('","') }}"]{% endif %}


# Specify names of the ldap attributes your ldap uses
[servers.attributes]
name      = "{{ grafana_ldap_given_name_attr }}"
surname   = "{{ grafana_ldap_surname_attr    }}"
username  = "{{ grafana_ldap_username_attr   }}"
member_of = "{{ grafana_ldap_member_of_attr  }}"
email     = "{{ grafana_ldap_email_attr      }}"

# Map ldap groups to grafana org roles
{% for mapping in grafana_ldap_group_mappings %}
[[servers.group_mappings]]
group_dn = "{{ mapping.ldap }}"
org_role = "{{ mapping.grafana }}"
{% if mapping.org_id is defined %}org_id = {{ mapping.org_id }}{% endif %}

{% endfor %}
